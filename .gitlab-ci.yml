stages:
  - formal
  - build
  - test
  - deploy

python-style:
  image: alpine
  stage: formal
  before_script:
    - apk add py3-flake8 py3-pytest py3-coverage
  script:
  - python3 -m flake8 --exclude=asu/__init__.py --max-line-length=88
    #  - python3 -m pytest -c pytest.ini
    #  - python3 -m coverage xml
    #  - python3 -m codacy -r coverage.xml

build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  except:
    - master

test-loaddb:
  image: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  stage: test
  services:
    - name: postgres:latest
      alias: db
  variables:
    POSTGRES_PASSWORD: changeme
    POSTGRES_DB: asu
    POSTGRES_USER: asu
    LC_ALL: C.UTF-8
    LANG: C.UTF-8
    FLASK_APP: asu
    FLASK_DEBUG: "1"
  script:
    - export PGPASSWORD="$POSTGRES_PASSWORD"
    - cat ~/.odbc.ini
    - psql -h db asu  < "$CI_PROJECT_DIR/asu/utils/tables.sql"
    - flask loaddb

deploy-master:
  image: docker:latest
  stage: deploy
  only:
    - master
  services:
    - docker:dind
  before_script:
    - docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
  script:
    - docker build --pull -t "$DOCKER_IMAGE" .
    - docker push "$DOCKER_IMAGE"
