openapi: 3.0.0
info:
  title: ASU Server API
  description: This is a simple API
  contact:
    name: Paul Spooren
    email: mail@aparcar.org
  license:
    name: GPL-2.0
    url: https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
  version: 0.5.9
externalDocs:
  description: README.md
  url: https://github.com/aparcar/asu/blob/master/README.md
servers:
- url: https://asu.aparcar.org
  description: Running instance of ASU
paths:
  /api/v1/overview:
    get:
      summary: Overview of branches and versions available
      description: |
        This can be used by user interfaces and update clients to check for
        latest releases. For automatic checks the static file at
        `/json/v1/latest.json` should be used.
      operationId: asu.api.api_v1_overview
      responses:
        "200":
          description: Overview of current OpenWrt versions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSchemaOverview'
  /api/v1/build:
    post:
      summary: Request a custom firmware image
      description: |
        This API call allows to request a firmware image containing any
        selection of packages. If the build was successfull it will respond a
        `200` response including information on the build and created images. If
        there were errors other status coulds will be returned, as described
        below.

        Since images take between 30 seconds and 5 minutes to be build, the
        status `202` response will be returend while an image is being build or
        in the build queue. Clients should poll the API every 5 seconds to if
        the image was build or an error occured.

        The `POST` request should only be done once. A valid request will result
        in a response including a `request_hash` which can then be used for the
        `/api/v1/build/<request_hash>` API path. This way the server doens't
        have to validate the request every time.
      operationId: asu.api.api_v1_build_post
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildRequest'
      responses:
        "200":
          $ref: '#/components/responses/ResponseSuccessfull'

        "202":
          $ref: '#/components/responses/ResponseActive'

        "400":
          $ref: '#/components/responses/ResponseError'

        "422":
          $ref: '#/components/responses/ResponseBadPackage'

        "500":
          $ref: '#/components/responses/ResponseError'

  /api/v1/build/{request_hash}:
    get:
      summary: check status of previously triggered build
      description: |
        This API path should be used for polling since it does not validate the
        request data every time but simply checks if the job exists.

        Ideally clients requests status updates no more then every 5 seconds.
      operationId: asu.api.api_v1_build_get
      parameters:
      - name: request_hash
        in: path
        description: |
          The hashed request is responded after a successful build request at
          `/api/v1/build`.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          $ref: '#/components/responses/ResponseSuccessfull'

        "202":
          $ref: '#/components/responses/ResponseActive'

        "404":
          $ref: '#/components/responses/ResponseError'

  /api/v1/revision/{version}/{target}/{subtarget}:
    get:
      summary: receive revision of current target
      operationId: asu.api.api_v1_revision
      parameters:
      - name: version
        in: path
        description: Version in question
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: target
        in: path
        description: Target used on device
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: subtarget
        in: path
        description: Target used on device
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Revision found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSchemaRevision'

components:
  responses:
    ResponseSuccessfull:
      description: Image successfully built
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BuildResponseSuccess'

    ResponseActive:
      description: |
        Build added to queue or currently building, please check again in 5
        seconds.
      headers:
        X-Queue-Position:
          schema:
            type: integer
            description: Current position in build queue
      content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildResponseActive'

    ResponseError:
      description: Invalid build request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BuildResponseError'

    ResponseBadPackage:
      description: Unknown package(s) in request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BuildResponseError'

  schemas:
    BuildRequest:
      required:
      - profile
      - target
      - version
      type: object
      additionalProperties: false
      properties:
        distro:
          type: string
          example: openwrt
          description: |
            This parameter is currently optional since no other distributions
            are supported.
        version:
          type: string
          example: 19.07.8
          description: |
            It is recommended to always upgrade to the latest version, however
            it is possible to request older images for testing.
        version_code:
          type: string
          description: |
            It is possible to send the expected revision. This allows to show
            the revision within clients before the request. If the resulting
            firmware is a different revision, the build results in an error.
          example: r11364-ef56c85848
        target:
          type: string
          example: ath79/generic
        profile:
          type: string
          example: 8dev_carambola2
        diff_packages:
          type: boolean
          description: |
            This parameter determines if requested packages are seen as
            *additional* or *absolut*. If set to `true` the packages are seen as
            *absolute* and all default packages outside the requested packages
            are removed.

            It is possible to brick devices when requesting an incomplete list
            with this parameter enabled since it may remove WiFi drivers.
        packages:
          type: array
          example:
          - vim
          - tmux
          items:
            type: string
          description: |
            List of packages, either *additional* or *absolute* depending of the
            `diff_packages` parameter.
        packages_versions:
          type: object
          additionalProperties:
            type: string
          example:
            vim: 8.0.1
            bmon: 3.0.1
          description: |
            Instead of using the `packages` parameter it is possible to include
            *expected* package versions. This is useful if the user interface
            shows package upgrades before performing an image request. Once
            approved by the user the build request will fail if any package of
            the resulting firmware is different than requested.

            It is not possible to specify what package version to request. Only
            the latest version of a package can be requested, which can be
            retrieved via provided package indexes.
        filesystem:
          type: string
          enum:
            - squashfs
            - ext4
            - ubifs
            - jffs2
          description: |
            Ability to specify filesystem running on device. Attaching this
            optional parameter will limit the ImageBuilder to only build
            firmware with that filesystem.
        defaults:
          type: string
          description: |
            Custom shell script embedded in firmware image to be run on first
            boot. This feature might be dropped in the future. Size is limited
            to 10kB and can not be exceeded.
          maxLength: 20480

      example:
        version: 19.07.8
        target: ath79/generic
        profile: 8dev_carambola2
        packages:
          - auc
          - luci-app-attendedsysupgrade

    BuildResponseError:
      type: object
      required:
        - detail
        - status
      properties:
        detail:
          type: string
          example: "asu.build.PackageSelectionError: bmon version not as requested: 1.0 vs. 4.0-1"
          description: |
            This contains a short but user readable detail of the occurring error.
        type:
          type: string
          example: "about:blank"
          description: "Further information on the issue. This is currently not used"
        status:
          type: integer
          example: 500
          description:
            Always the same as the responding HTTP status code.
        enqueued_at:
          type: string
          format: date-time
          example: "2021-08-15T09:59:27.754430Z"
          description:
            Time and date of the build request.
        request_hash:
          type: string
          example: "5992c73895fb"
          description:
            The `request_hash` is based on all parameters of a build request and
            can be used for polling.

    BuildResponseActive:
      type: object
      required:
        - detail
        - enqueued_at
        - request_hash
        - status
      properties:
        detail:
          type: string
          example: "queued"
          description: |
            This is currently either `queued` or `started`. Instead of relying
            on this parameter it can be always considered *active* if the HTTP
            status code is `202`.
        enqueued_at:
          type: string
          format: date-time
          example: "2021-08-15T09:59:27.754430Z"
          description:
            Time and date of the build request.
        request_hash:
          type: string
          example: "5992c73895fb"
          description:
            The `request_hash` is based on all parameters of a build request and
            can be used for polling.
        status:
          type: integer
          example: 202
          description:
            Always the same as the responding HTTP status code.
        queue_position:
          type: integer
          example: 2
          description: |
            Current position in build queue. If the response contains the queue
            position the firmware build is queued, if it does not the firmware
            is currently being built.
      example:
        detail: queued
        enqueued_at: 2021-08-22T20:41:32.729065Z
        queue_position: 2,
        request_hash: f74fdcb97a09
        status: 202

    BuildResponseSuccess:
      type: object
      required:
        - build_at
        - enqueued_at
        - id
        - image_prefix
        - images
        - manifest
        - metadata_version
        - request_hash
        - status
        - supported_devices
        - target
        - titles
        - version_code
        - version_number
      properties:
        build_at:
          type: string
          format: date-time
          example: "2021-08-29T02:43:55.929319Z"
        enqueued_at:
          type: string
          format: date-time
          example: "2021-08-29T02:42:55.929319Z"
        id:
          type: string
          example: "avm_fritzbox-4040"
        image_prefix:
          type: string
          example: "openwrt-387e9d003d04-ipq40xx-generic-avm_fritzbox-4040"
        images:
          type: array
          items:
            type: object
            required:
              - name
              - sha256
              - type
            properties:
              name:
                type: string
                example: "openwrt-387e9d003d04-ipq40xx-generic-avm_fritzbox-4040-squashfs-eva.bin"
              sha256:
                type: string
                example: "8cb0d58bf672ed442f0813a1f04ec2f5edf6e2b64c8f117cb11158e19251aa0b"
              type:
                type: string
                example: "eva"
        manifest:
          type: object
          additionalProperties:
            type: string
        metadata_version:
          type: integer
          description: Version of the JSON file create by OpenWrt ImageBuilder
          example: 1
        request_hash:
          type: string
          example: "5bac6cb8321f"
        status:
          type: integer
          example: 500
        supported_devices:
          type: array
          items:
            type: string
            example: "avm,fritzbox-4040"
        target:
          type: string
          example: "ipq40xx/generic"
        titles:
          type: array
          items:
            oneOf:
              - type: object
                required:
                - model
                - vendor
                properties:
                  vendor:
                    type: string
                    example: "AVM"
                  model:
                    type: string
                    example: "FRITZ!Box 4040"
                  variant:
                    type: string
                    example: "v1"
              - type: object
                required:
                  - title
                properties:
                  title:
                    type: string
                    example: "AVM FRITZ!Box 7320"
        version_code:
          type: string
          example: "r12297-7e9c7e7b2d"
        version_number:
          type: string
          example: "SNAPSHOT"
        build_cmd:
          type: array
          items:
            type: string
          description: |
            Contains the shell command ran by the ImageBuilder. This can be
            used locally to test builds for reproducibility.
        imagebuilder_status:
          type: string
          enum:
            - download_imagebuilder
            - unpack_imagebuilder
            - calculate_packages_hash
            - building_image
          example: "download_imagebuilder"

    JsonSchemaBranch:
      type: object
      additionalProperties: False
      properties:
        name:
          type: string
          example: 19.07
        enabled:
          type: boolean
        snapshot:
          type: boolean
        versions:
          type: array
          items:
            type: string
            example:
              - 19.07.8
              - 19.07.7
              - 19.07.6
        git_branch:
          type: string
          example: openwrt-19.07
        updates:
          type: string
          enum: [dev, features, bugs, security]
          example: bugs
          description: |
            Describes what kind of update a branch receives
              - `dev` unstable development
              - `features` receives new features
              - `bugs` only bug fixes
              - `security` only security fixes
        release_date:
          type: string
          format: date
          example: "2021-08-15"
          description: |
            Date of the latest release
        eol:
          type: string
          format: date
          example: "2021-08-15"
          description:
            Date of branch end of life
        path:
          type: string
          example: "releases/{version}"
        path_packages:
          type: string
          example: "releases/packages-{branch}"
        pubkey:
          type: string
          example: RWS1BD5w+adc3j2Hqg9+b66CvLR7NlHbsj7wjNVj0XGt/othDgIAOJS+
        targets:
          type: object
          additionalProperties:
            type: string
          example:
            apm821xx/nand: powerpc_464fp
            x86/64: x86_86
        extra_repos:
          type: object
          additionalProperties:
            type: string
        extra_keys:
          type: array
          items:
            type: string
        repos:
          type: array
          items:
            type: string

    JsonSchemaOverview:
      type: object
      additionalProperties: False
      required:
        - latest
        - branches
        - server
      properties:
        latest:
          type: array
          items:
            type: string
            example:
              - SNAPSHOT
              - 21.02.0-rc4
              - 19.07.7
        branches:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonSchemaBranch'
        server:
          type: object
          properties:
            version:
              type: string
              example: v0.6.1
            contact:
              type: string
              example: mail@aparcar.org

    JsonSchemaRevision:
      type: object
      additionalProperties: false
      required:
        - revision
      properties:
        revision:
          type: string
          example: r11364-ef56c85848
